name: SharedKernel CI/CD

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*" # Production releases (v1.0.0, v2.1.3, etc.)
      - "v*.*.*-*" # Preview releases (v1.0.0-beta.1, v1.0.0-rc.1, etc.)
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: "8.0.x"
  PROJECT_PATH: "src/Silverness.SharedKernel.csproj"
  TEST_PROJECT_PATH: "tests/Silverness.SharedKernel.UnitTests.csproj"

jobs:
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for versioning to work correctly

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: true

  build-package:
    name: Build NuGet Package
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request'

    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      is-tagged: ${{ steps.version.outputs.is-tagged }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: "6.3.x"

      - name: Generate version using GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true

      - name: Determine version strategy
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            # Tag-based release
            TAG_NAME="${{ github.ref_name }}"
            VERSION=${TAG_NAME#v}  # Remove 'v' prefix
            
            if [[ "$VERSION" == *"-"* ]]; then
              echo "is-prerelease=true" >> $GITHUB_OUTPUT
              echo "This is a prerelease: $VERSION"
            else
              echo "is-prerelease=false" >> $GITHUB_OUTPUT
              echo "This is a production release: $VERSION"
            fi
            
            echo "is-tagged=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Branch-based development build using GitVersion
            VERSION="${{ steps.gitversion.outputs.nuGetVersionV2 }}"
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "is-tagged=false" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Development build version: $VERSION"
          fi

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: |
          dotnet build --no-restore --configuration Release \
            -p:Version="${{ steps.version.outputs.version }}" \
            -p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" \
            -p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" \
            -p:InformationalVersion="${{ steps.gitversion.outputs.informationalVersion }}"

      - name: Pack
        run: |
          dotnet pack ${{ env.PROJECT_PATH }} \
            --no-build \
            --configuration Release \
            -p:PackageVersion=${{ steps.version.outputs.version }} \
            -p:Version=${{ steps.version.outputs.version }} \
            --output ./nupkg

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package-${{ steps.version.outputs.version }}
          path: ./nupkg/*.nupkg

  publish-github:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name != 'pull_request'

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-${{ needs.build-package.outputs.version }}
          path: ./nupkg

      - name: Publish to GitHub Packages
        run: |
          dotnet nuget push ./nupkg/*.nupkg \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate
