name: SharedKernel CI/CD

on:
  push:
    branches: [main]
    tags:
      - "v*.*.*" # Production releases (v1.0.0, v2.1.3, etc.)
      - "v*.*.*-*" # Preview releases (v1.0.0-beta.1, v1.0.0-rc.1, etc.)
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: "8.0.x"
  PROJECT_PATH: "src/Silverness.SharedKernel.csproj"
  TEST_PROJECT_PATH: "tests/Silverness.SharedKernel.UnitTests.csproj"

jobs:
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for versioning to work correctly

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: |
          dotnet test ${{ env.TEST_PROJECT_PATH }} \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: false

  build-package:
    name: Build NuGet Package
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request'

    outputs:
      version: ${{ steps.git_version.outputs.fullSemVer }}
      semver: ${{ steps.git_version.outputs.semVer }}
      is-prerelease: ${{ steps.git_version.outputs.preReleaseTag != '' }}
      is-tagged: ${{ github.ref_type == 'tag' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install git_version
        uses: gittools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: "6.3.x"

      - name: Generate version
        id: git_version
        uses: gittools/actions/gitversion/execute@v4.1.0
        with:
          updateAssemblyInfo: true

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: |
          dotnet build ${{ env.PROJECT_PATH }} \
            --no-restore \
            --configuration Release \
            -p:Version="${{ steps.git_version.outputs.fullSemVer }}" \
            -p:AssemblyVersion="${{ steps.git_version.outputs.assemblySemVer }}" \
            -p:FileVersion="${{ steps.git_version.outputs.assemblySemFileVer }}" \
            -p:InformationalVersion="${{ steps.git_version.outputs.informationalVersion }}"

      - name: Pack
        run: |
          dotnet pack ${{ env.PROJECT_PATH }} \
            --no-build \
            --configuration Release \
            -p:PackageVersion="${{ steps.git_version.outputs.fullSemVer }}" \
            -p:Version="${{ steps.git_version.outputs.fullSemVer }}" \
            -p:AssemblyVersion="${{ steps.git_version.outputs.assemblySemVer }}" \
            -p:FileVersion="${{ steps.git_version.outputs.assemblySemFileVer }}" \
            --output ./nupkg

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package-${{ steps.git_version.outputs.fullSemVer }}
          path: ./nupkg/*.nupkg

  publish-github:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name != 'pull_request'

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-${{ needs.build-package.outputs.version }}
          path: ./nupkg

      - name: Publish to GitHub Packages
        run: |
          dotnet nuget push ./nupkg/*.nupkg \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate
